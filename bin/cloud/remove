#!/bin/bash

CLIENTNAME=$1
CLUSTER=$2

KEYTAB=/root/hadder.keytab
KEYUSER=hadder
DOMAIN=$(hostname -d)
REALM=$(echo `hostname -d` | sed -e 's/\(.*\)/\U\1/')
REVERSEZONE="`hostname -i | cut -d . -f 3`.`hostname -i | cut -d . -f 2`.`hostname -i | cut -d . -f 1`.in-addr.arpa."

function check_node {

    DOMAINRECORDS=$(ipa dnsrecord-find $CLUSTER.$DOMAIN $CLIENTNAME |
                     grep "${CLIENTNAME}" |
                     awk '{print $3}')
    if [ -z "$DOMAINRECORDS" ];
    then
        echo "FAIL - NO ENTRY EXISTS"
        exit 0
    elif [ "$DOMAINRECORDS" == "$CLIENTNAME" ];
    then
        echo "OK"
        remove_node >> /dev/null
    fi

}

function remove_node {

    ipa host-del $CLIENTNAME.$CLUSTER.$REALM --updatedns --continue

    # At this point, check if we are the last remaining node
    RECORDS=$(ipa dnsrecord-find $CLUSTER.$DOMAIN |
              # grep -v -E '(Record\ name\:\ \@|Record\ name\:\ _kerberos|NS\ record\:\ directory.bedrock.alces.cluster|TXT\ record\:\ BEDROCK.ALCES.CLUSTER)' |
              grep -v "Record\ name\:\ \@" |
              grep -v "Record\ name\:\ _kerberos" |
              grep -v "NS\ record\"\ directory.$DOMAIN" |
              grep -v "TXT\ record\:\ $REALM" |
              grep "Record\ name:" |
              awk '{print $3}' |
              wc -l)
    if [ "$RECORDS" -eq 0 ];
    then
      remove_cluster
    elif [ "$RECORDS" -gt 0 ];
    then
      exit 0
    fi

}

function remove_cluster {

  if [ "$(ipa dnszone-find | grep "${CLUSTER}.${DOMAIN}." | awk '{print $3}')" == "${CLUSTER}.${DOMAIN}." ];
  then

    # Remove the cluster from the realm
    ipa dnsrecord-del $REALM $CLUSTER --del-all
    ipa dnszone-del $CLUSTER.$REALM > /dev/null 2>&1

  fi

}

if [[ -z $CLIENTNAME || -z $CLUSTER ]];
then
    echo "One or more settings not provided"
    echo "Usage: $0 <client name> <cluster>"
    exit 0
else
    kinit -kt $KEYTAB $KEYUSER@$REALM
    check_node
    kdestroy
fi
